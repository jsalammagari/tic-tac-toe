Based on the requirements, here are the core classes, functions, and methods that will be necessary:

Classes:
- Game: Represents the Tic-Tac-Toe game and contains the game logic.
- Player: Represents a player in the game and stores their mark ('X' or 'O').

Functions/Methods:
- play_game(): Starts and manages the game.
- display_board(): Displays the current state of the game board.
- get_move(): Prompts the current player for their move and validates it.
- make_move(): Updates the game board with the current player's move.
- check_win(): Checks if the current player has won the game.
- check_draw(): Checks if the game has ended in a draw.
- switch_players(): Switches the turn to the next player.

Now let's proceed with creating the necessary files and implementing the code.

1. game.py

```python
from typing import List

class Game:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        self.current_player = None
        self.winner = None
        self.draw = False

    def start(self):
        self.current_player = Player('X')
        self.play_game()

    def play_game(self):
        while not self.winner and not self.draw:
            self.display_board()
            self.get_move()
            self.make_move()
            if self.check_win():
                self.winner = self.current_player
            elif self.check_draw():
                self.draw = True
            else:
                self.switch_players()

        self.display_board()
        if self.winner:
            print(f"Player {self.winner.mark} wins!")
        else:
            print("It's a draw!")

    def display_board(self):
        print("---------")
        for row in self.board:
            print('|', end='')
            for cell in row:
                print(f' {cell} |', end='')
            print("\n---------")

    def get_move(self):
        valid_move = False
        while not valid_move:
            try:
                row = int(input("Enter the row number (0-2): "))
                col = int(input("Enter the column number (0-2): "))
                if 0 <= row <= 2 and 0 <= col <= 2 and self.board[row][col] == ' ':
                    valid_move = True
                else:
                    print("Invalid move. Please try again.")
            except ValueError:
                print("Invalid input. Please enter a number.")

        self.current_player.move = (row, col)

    def make_move(self):
        row, col = self.current_player.move
        self.board[row][col] = self.current_player.mark

    def check_win(self):
        mark = self.current_player.mark
        for i in range(3):
            if self.board[i][0] == self.board[i][1] == self.board[i][2] == mark:
                return True
            if self.board[0][i] == self.board[1][i] == self.board[2][i] == mark:
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] == mark:
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] == mark:
            return True
        return False

    def check_draw(self):
        for row in self.board:
            if ' ' in row:
                return False
        return True

    def switch_players(self):
        self.current_player = Player('O') if self.current_player.mark == 'X' else Player('X')


class Player:
    def __init__(self, mark):
        self.mark = mark
        self.move = None
```

2. main.py

```python
from game import Game

def main():
    game = Game()
    game.start()

if __name__ == '__main__':
    main()
```

3. test_game.py

```python
import unittest
from game import Game, Player

class TestGame(unittest.TestCase):
    def setUp(self):
        self.game = Game()

    def test_initial_state(self):
        self.assertEqual(self.game.board, [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']])
        self.assertIsNone(self.game.current_player)
        self.assertIsNone(self.game.winner)
        self.assertFalse(self.game.draw)

    def test_switch_players(self):
        player1 = Player('X')
        player2 = Player('O')
        self.game.current_player = player1
        self.game.switch_players()
        self.assertEqual(self.game.current_player, player2)
        self.game.switch_players()
        self.assertEqual(self.game.current_player, player1)

    def test_make_move(self):
        self.game.current_player = Player('X')
        self.game.current_player.move = (1, 1)
        self.game.make_move()
        self.assertEqual(self.game.board, [[' ', ' ', ' '], [' ', 'X', ' '], [' ', ' ', ' ']])

    def test_check_win_row(self):
        self.game.board = [['X', 'X', 'X'], [' ', ' ', ' '], [' ', ' ', ' ']]
        self.game.current_player = Player('X')
        self.assertTrue(self.game.check_win())

    def test_check_win_column(self):
        self.game.board = [['X', ' ', ' '], ['X', ' ', ' '], ['X', ' ', ' ']]
        self.game.current_player = Player('X')
        self.assertTrue(self.game.check_win())

    def test_check_win_diagonal(self):
        self.game.board = [['X', ' ', ' '], [' ', 'X', ' '], [' ', ' ', 'X']]
        self.game.current_player = Player('X')
        self.assertTrue(self.game.check_win())

    def test_check_draw(self):
        self.game.board = [['X', 'O', 'X'], ['X', 'O', 'O'], ['O', 'X', 'X']]
        self.assertTrue(self.game.check_draw())

if __name__ == '__main__':
    unittest.main()
```

4. requirements.txt

```
pytest==6.2.4
```

This is the complete source code for the Tic-Tac-Toe application along with the unit tests. The code is organized into three files: game.py, main.py, and test_game.py. The game.py file contains the Game and Player classes, which handle the game logic. The main.py file is the entry point of the application and starts the game. The test_game.py file contains the unit tests for the game functionalities.

The requirements.txt file specifies the pytest package as a dependency for running the unit tests.

Please let me know if you need any further assistance!